第2回課題
使用機器:自分のwindowsPC
python環境:vscode
バージョン:3


----実行結果----
ライブラリを使用せずに得られた解:
x = 0.8260313576542962
y = 0.5636241621612145
実行時間: 0.0010123252868652344秒

ライブラリを使用して得られた解:
x = 0.8260313576541873
y = 0.563624162161259
実行時間: 0.0秒
----説明----
今回は、非線形の連立方程式を解くためのプログラムを作成した。
非線形方程式を解くための2つのアプローチを比較しており、
1つは独自に実装したニュートン・ラフソン法（Newton-Raphson method）を使用し、もう1つはSciPyライブラリのfsolve関数を使用した。
以下にそれぞれの関数の説明を記載する。

equations(vars) 関数: これは非線形方程式の右辺を定義している。引数 vars は未知数 x と y のリストで、この関数は2つの方程式を返す。

newton_raphson(equations, initial_guess, tol=1e-6, max_iter=100) 関数: これはニュートン・ラフソン法を実装している。
この関数は初期推定値 initial_guess と許容誤差 tol、最大反復回数 max_iter を受け取る。
指定した初期推定値から方程式を解くために、反復的にニュートン法を使用している。

ライブラリを使用して方程式を解く方法として、fsolve 関数が使用している。
結果は solution_library に格納され、実行時間も計測される。
ニュートンラフソン法は以下のような手順のアルゴリズムである。
1.初期推定値を選ぶ。この初期推定値は非線形方程式の解の近似値とする。
2.初期推定値を用いて、非線形方程式の接線（接線は方程式の解に接触する直線）を計算する。
接線の方程式は、初期推定値における方程式の接線の傾き（導関数の値）を使って計算する。
3.次に、接線が x 軸と交わる点を計算し、その点が新しい推定値となる。
4.新しい推定値を使用して、再度非線形方程式の接線を計算し、新しい推定値を更新する。
これを繰り返し、収束基準（通常は収束誤差が小さくなるか、一定の反復回数が達成されること）が満たされるまで続ける。
----考察----
結果を見てみると、ライブラリをもちいた方法でも、自作のプログラムでも適切な解を求められていることがわかる。
実行時間に関しては、どちらも短いが、ライブラリをもちいた方法のほうが早く実装できていることがわかる。
ニュートンラフソン法に関しては、初期推定値が解に十分に近い場合、通常は収束し、高速で正確な解を提供するが、初期推定値が不適切である場合、収束しないことがあると考えられる。
また、初期推定値によっては局所解に収束する可能性があるため、解が複数ある場合には注意が必要であると考える。
今回は解が4つ(実数解2つと虚数解2つ)があると考えられるが、一組の解のみ得ることができた。
調べてみると、sympyを用いるとすべての解が得られると書いてあり、実際にプログラムを作成したが、実行が終わらなかった。
この原因を調べて改善したい。