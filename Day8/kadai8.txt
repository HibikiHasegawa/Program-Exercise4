第8回課題
使用機器:自分のwindowsPC
python環境:vscode
バージョン:3


----実行結果----
分割数/乱数の数: 10
区分求積法（台形法）: 1.0819275852, 誤差: 0.0819275852
モンテカルロ法: 0.2806771013, 誤差: 0.7193228987
シンプソンの公式: 1.0049115557, 誤差: 0.0049115557


分割数/乱数の数: 100
区分求積法（台形法）: 1.0007877567, 誤差: 0.0007877567
モンテカルロ法: 0.7345682122, 誤差: 0.2654317878
シンプソンの公式: 0.9999551549, 誤差: 0.0000448451


分割数/乱数の数: 1000
区分求積法（台形法）: 0.9999629330, 誤差: 0.0000370670
モンテカルロ法: 0.8881914984, 誤差: 0.1118085016
シンプソンの公式: 0.9999546001, 誤差: 0.0000453999


分割数/乱数の数: 10000
区分求積法（台形法）: 0.9999546834, 誤差: 0.0000453166
モンテカルロ法: 1.0226691961, 誤差: 0.0226691961
シンプソンの公式: 0.9999546001, 誤差: 0.0000453999

----説明----
このプログラムは、Pythonを使用して数値積分の三つの手法（区分求積法、モンテカルロ法、シンプソンの公式）を実装し、
それらの結果を比較するためのサンプルコードである。以下に、プログラムの各部分の説明を示す。
1.関数の定義:
integrand(x): 積分対象の関数であり、ここではe^(-x)である。

2.区分求積法の実装:
trapezoidal_rule(func, a, b, n): 区分求積法を実装している。
func: 積分対象の関数。
a: 積分範囲の下限。
b: 積分範囲の上限。
n: 区間を分割する数。
np.linspace(a, b, n + 1)はNumPyライブラリの関数で、数値の範囲を等間隔で分割するために使用されている。

3.モンテカルロ法の実装:

monte_carlo_integration(func, a, b, n): モンテカルロ法を実装している。
func: 積分対象の関数。
a: 積分範囲の下限。
b: 積分範囲の上限。
n: 乱数の数。
x: np.random.uniform(a, b, n) によって生成された、区間 [a, b] からランダムに選ばれた n 個の数値の一次元NumPy配列である。
これらの数値は、積分領域内のランダムな点を表す。
近似された定積分の値は、(b - a) * np.mean(y) によって計算される。これは、積分領域の幅 (b - a) と被積分関数の平均値 np.mean(y) を掛け合わせたものである。
モンテカルロ積分法では、ランダムに選ばれた点での関数の平均値を用いて積分を近似する。

4.シンプソンの公式の実装:

simpsons_rule(func, a, b, n): シンプソンの公式を実装している。
func: 積分対象の関数。
a: 積分範囲の下限。
b: 積分範囲の上限。
n: 区間を分割する数。この実装では偶数である必要がある。

近似された定積分の値は、(h / 3) * (y[0] + 4 * np.sum(y[1:-1:2]) + 2 * np.sum(y[2:-2:2]) + y[-1]) によって計算される。
この式は、シンプソン則の公式に基づいている。
具体的には、最初と最後の点の重みが1、奇数番目の点の重みが4、偶数番目の点の重みが2となるようにして、それらの加重平均を取る。

5.メインの実行部分:

if __name__ == '__main__': の下で、各手法を異なる分割数（または乱数の数）で評価し、結果と誤差を出力している。
この例では、分割数/乱数の数が10、100、1000、10000の場合について計算している。
各手法の結果とその正確な積分値との誤差が表示される。
----考察----
各数値積分手法の結果と誤差を見ると、次のような傾向がある。

区分求積法（台形法）:

分割数が増えるにつれて、近似値が正確になり、誤差が減少していることがわかる。
例えば、分割数が10のときの誤差は0.0819、分割数が10000のときの誤差は0.0000453となっており、分割数が増えるほど誤差が小さくなっている。

モンテカルロ法:

モンテカルロ法の結果は乱数に依存するため、同じ数でも異なる結果が得られると考えられる。
しかし、傾向としては分割数が増えるにつれて精度が向上していることがわかる。
一方で、他の手法に比べて相対的に大きな誤差が残っている。

シンプソンの公式:

分割数が増えるにつれて、近似値が正確になり、誤差が減少していることがわかる。
区分求積法（台形法）と同様に、分割数が増えると誤差が小さくなっている。

一般的に、積分手法の選択は問題に依存すると考えられる。
分割数が少ない場合や関数が複雑な形状を持つ場合、シンプソンの公式などの高次の手法がより正確な結果を提供することがあると考えられる。
一方で、モンテカルロ法はランダムな性質を持ち、大量のサンプルを使用すれば正確な結果が得られる優れた手法となるが、一回の計算では誤差が大きいことがあると考えられる。