第1回課題
使用機器:自分のwindowsPC
python環境:vscode
バージョン:3


----実行結果----
ライブラリを使わない場合の解: x ≈ 1.921496
ライブラリを使わない場合の実行時間: 0.000061秒
ライブラリを使う場合の解: x ≈ 1.921496
ライブラリを使う場合の実行時間: 0.000031秒

----説明----
このPythonコードは、非線形方程式を解くための2つの方法を比較し、それぞれの実行時間を計測して表示するコードである。
具体的にそれぞれの関数の説明を以下に記載する。

binary_search_nonlinear_equation 関数:
引数として与えられた非線形方程式の解を、指定された範囲 [a, b] で二分法を使って求める関数である。
tol は許容誤差（デフォルト値は 1e-10）、max_iter は最大反復回数（デフォルト値は 1000）を指定している。
二分法を用いて解を近似的に求め、解が見つかればその値を、見つからなければ近似値を返す。

measure_execution_time 関数:
他の関数を引数として受け取り、その関数の実行時間を計測するための関数である。
time.perf_counter() 関数を使用して実行時間を計測し、結果と実行時間を返す。

main 関数:
解の範囲 [a, b] を指定し、次に以下を実行している。
binary_search_nonlinear_equation 関数を使用して非線形方程式を二分法で解き、その実行時間を計測する。
bisect 関数（Scipyライブラリを使用）を使用して非線形方程式を解き、その実行時間を計測する。
それぞれの方法で求めた解と実行時間を表示している。
----考察----
二分法とScipyのbisect関数を使用して、同じ非線形方程式を解くことができた。
実行時間に関してはライブラリを用いた方が約2倍早い時間で実行できていることがわかる。
今回の方程式は、実際には五つの解が存在することがわかっている。
指定した範囲 [a, b] において、非線形方程式の解が存在することを確認するためには、範囲の両端での関数値の積が負である必要がある。
これは、範囲 [a, b] の両端が異なる符号の関数値を持つことを意味する。
範囲 [a, b] が非常に広い場合、二分法を使用することで、解が存在するかどうかを効率的に確認できる。
なぜなら、二分法は範囲を半分に分割し、その中点での関数値を評価するため、解が存在する場所に収束していくからである。
要するに、二分法は範囲内の解を探すプロセスであり、範囲が大きい場合でも収束性が高いため、範囲を半分に分割しながら解に近づいていくことができる。
このアプローチによって、広い範囲から解を効率的に見つけ出すことができる。
二分法は連続的な関数に適用されるが、非連続性や不連続点が存在する場合には適切に処理できないことがあるデメリットもあると考えられる。
