第10回課題
使用機器:自分のwindowsPC
python環境:vscode
バージョン:3


----実行結果----
グラフの通り

----説明----
このプログラムは、与えられた微分方程式を解くために、4次のおよび2次のルンゲクッタ法を用いて数値的に解を求め、その結果をグラフに表示している。

このプログラムは、微分方程式 \(y'' - xy' + xy = 0\) を解くために、4次のおよび2次のルンゲクッタ法を用いて数値的に解を求め、その結果をグラフに表示しています。

1. 微分方程式の定義
   - `func_f(y, dy_dx, x)`: 与えられた微分方程式を表す関数。この関数はy,y',xを受け取り、微分方程式の右辺の値を返す。

2. 4次のルンゲクッタ法 (`Runge_Kutta_4`)および2次のルンゲクッタ法 (`Runge_Kutta_2`):
   - 与えられた範囲[a, b]/Nに基づいて、4次および2次のルンゲクッタ法を用いて微分方程式を数値的に解く。
   - 初期条件y(0) = 1およびy'(0) = 1から始まり、微分方程式をステップごとに進めていく。

3.メイン部分if __name__ == '__main__':
   - `Runge_Kutta_4`および `Runge_Kutta_2` を実行し、それぞれの結果を取得する。
   - 取得した結果を用いて、関数y(x)とy'のグラフを表示する。

4. グラフの表示:
   - `plt.plot` を使用して、微分方程式の解を x 軸と y 軸に対応させたグラフを描画している。
   - グラフにはそれぞれのルンゲクッタ法の結果が含まれており、凡例 (`plt.legend()`) を表示している。
   - x 軸および y 軸には適切なラベルが付けられ、`plt.show()` でグラフが表示される。



----考察----
4次のルンゲクッタ法:
4次のルンゲクッタ法は高精度な数値解法の一つであり、微小な刻み幅において安定していることが期待される。
このため、計算された数値解は信頼性が高いと考えられる。
2次のルンゲクッタ法:
2次のルンゲクッタ法は、オイラー法よりも精度が向上しているが、4次のルンゲクッタ法ほど高い精度はないと考えられる。
計算された数値解は、中程度の精度であると思われる。
比較的単純な微分方程式であるため、オイラー法や2次のルンゲクッタ法でも一定の範囲で有効な数値解が得られているのだと考えられる。
しかし、解の正確性や計算の安定性を求める場合は、特に厳密な条件や高い精度が必要な場合は、4次のルンゲクッタ法などの高次の数値解法を使用することが望ましいだろう。
今回はどちらの解法でも同じ結果が得られた。方程式によっては同じ結果が得られることがあることがわかった。