第2回課題
使用機器:自分のwindowsPC
python環境:vscode
バージョン:3


----実行結果----
カスタム関数での解: 1.9214959283983215
カスタム関数での実行時間: 2.3200000000000998e-05 秒
SciPyでの解: 1.9214959283983215
SciPyでの実行時間: 0.00032529999999997283 秒

----説明----
今回は、前回と同じ方程式をニュートン法で解くプログラムを作成した。
関数の説明は以下の通り。

measure_execution_time 関数: この関数は、与えられた関数を実行し、その実行時間を測定する。
実行時間の測定は、time.perf_counter() 関数を使用して行われる。
この関数は、関数を引数として受け取り、その関数を実行し、結果と実行時間を返す。

newton_method 関数: この関数は、ニュートン法を使用して非線形方程式の数値解を求めるための関数である。
引数として、関数 f（非線形方程式の関数）、関数 df（関数 f の導関数）、初期推測値 initial_guess、収束判定のための許容誤差 epsilon、および最大反復回数 max_iterations を受け取る。
ニュートン法のアルゴリズムを実装し、数値解を計算する。

main 関数: main関数では、非線形方程式をカスタム関数とSciPyの newton 関数を使用して解き、それぞれの実行時間を計測している。
実行時間の計測には measure_execution_time 関数と timeit.timeit 関数が使用されている。
----考察----
結果を見てみると、方程式の解はどちらの解法でも等しくなっていることがわかるが、
自作の関数でのプログラのほうが、ライブラリ関数(Scipy)よりも実行時間が速いことがわかる。
SciPyの関数はより高度に最適化されており、一般的には高速な解の計算が可能であるが、状況によってはカスタム関数を用いた方が処理速度が微小であるが早くなることがあると考えられる。
また、第一回の課題における二分法での結果も再掲する。
ライブラリを使わない場合の解: x ≈ 1.921496
ライブラリを使わない場合の実行時間: 0.000061秒
ライブラリを使う場合の解: x ≈ 1.921496
ライブラリを使う場合の実行時間: 0.000031秒
今回のニュートン法の結果と比べてみると、処理速度はほとんど変わらないことがわかる。
しかし、ニュートン法も二分法も両者とも実行時間は初期値に依存すると考えられるので、両者の実行時間で性能を優劣つけるのは尚早なのではないかと結論付けた。
